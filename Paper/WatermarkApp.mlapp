classdef WatermarkApp < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = private)
        UIFigure            matlab.ui.Figure
        LoadOriginalButton matlab.ui.control.Button
        LoadWatermarkButton matlab.ui.control.Button
        WaveletTypeEditField matlab.ui.control.EditField
        AlphaEditField      matlab.ui.control.EditField
        WatermarkButton     matlab.ui.control.Button
        originalImage       % Add this property
        watermarkImage      % Add this property
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: LoadOriginalButton
        function loadOriginalButtonPushed(app, ~)
            [filename, pathname] = uigetfile({'*.jpg;*.png;*.bmp'}, 'Select Original Image');
            if filename
                app.originalImage = imread(fullfile(pathname, filename));
            end
        end

        % Button pushed function: LoadWatermarkButton
        function loadWatermarkButtonPushed(app, ~)
            [filename, pathname] = uigetfile({'*.jpg;*.png;*.bmp'}, 'Select Watermark Image');
            if filename
                app.watermarkImage = imread(fullfile(pathname, filename));
            end
        end

        % Button pushed function: WatermarkButton
        function watermarkButtonPushed(app, ~)
            % Check if images are loaded
            if ~isempty(app.originalImage) && ~isempty(app.watermarkImage)
                % Get user input
                waveletType = app.WaveletTypeEditField.Value;
                alpha = str2double(app.AlphaEditField.Value);

                % Resize the watermark image
                [Mo, No, ~] = size(app.originalImage);
                watermark_image_resized = imresize(app.watermarkImage, [Mo, No]);

                % Apply watermarking
                watermarked_image = app.applyWatermark(app.originalImage, watermark_image_resized, waveletType, alpha);

                % Display the watermarked image
                figure;
                imshow(watermarked_image);
                title('Watermarked Image');
            else
                msgbox('Please load both original and watermark images.', 'Error', 'error');
            end
        end
    end

    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)
            % Create UIFigure and components
            app.UIFigure = uifigure('Name', 'Watermark App', 'Position', [100, 100, 500, 250]);

            app.LoadOriginalButton = uibutton(app.UIFigure, 'push', ...
                'Text', 'Load Original Image', ...
                'Position', [50, 200, 150, 30], ...
                'ButtonPushedFcn', @(~, ~) app.loadOriginalButtonPushed);

            app.LoadWatermarkButton = uibutton(app.UIFigure, 'push', ...
                'Text', 'Load Watermark Image', ...
                'Position', [250, 200, 150, 30], ...
                'ButtonPushedFcn', @(~, ~) app.loadWatermarkButtonPushed);

            app.WaveletTypeEditField = uieditfield(app.UIFigure, 'text', ...
                'Position', [50, 150, 100, 22], ...
                'Value', 'db4', ...
                'PlaceHolder', 'Wavelet Type');

            app.AlphaEditField = uieditfield(app.UIFigure, 'numeric', ...
                'Position', [200, 150, 100, 22], ...
                'Value', 0.1, ...
                'Limits', [0, 1], ...
                'PlaceHolder', 'Alpha');

            app.WatermarkButton = uibutton(app.UIFigure, 'push', ...
                'Text', 'Apply Watermark', ...
                'Position', [350, 150, 100, 30], ...
                'ButtonPushedFcn', @(~, ~) app.watermarkButtonPushed);
        end

        % Set up layout
        function setUpLayout(app)
            % Set up layout
            app.UIFigure.Position(3) = 500;
            app.UIFigure.Position(4) = 250;

            app.LoadOriginalButton.Position = [50, 200, 150, 30];
            app.LoadWatermarkButton.Position = [250, 200, 150, 30];
            app.WaveletTypeEditField.Position = [50, 150, 100, 22];
            app.AlphaEditField.Position = [200, 150, 100, 22];
            app.WatermarkButton.Position = [350, 150, 100, 30];
        end

        % Apply watermarking to the original image
        function watermarked_image = applyWatermark(app, original_image, watermark_image, waveletType, alpha)
            % Apply DWT to each color channel of the original image and the watermark image
            for k = 1:3 % Iterate over RGB color channels
                [cA1, ~, ~, ~] = dwt2(original_image(:,:,k), waveletType);
                [cA2, ~, ~, ~] = dwt2(watermark_image(:,:,k), waveletType);

                % Add the watermark to the original image in the LL subband
                cA1 = cA1 + alpha * cA2;

                % Reconstruct the watermarked image using IDWT
                watermarked_image(:,:,k) = idwt2(cA1, [], [], [], waveletType, size(original_image(:,:,k)));
            end
        end
    end

    % App creation and setup
    methods (Access = public)
        % Constructor
        function app = WatermarkApp
            % Create UIFigure and components
            app.createComponents();

            % Set up layout
            app.setUpLayout();
        end
    end
end
